
day10_can_normal_mode_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003718  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080038a0  080038a0  000048a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038c0  080038c0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080038c0  080038c0  000048c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038c8  080038c8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c8  080038c8  000048c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038cc  080038cc  000048cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080038d0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000168  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000174  20000174  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e07  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001813  00000000  00000000  0000ee43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00010658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000692  00000000  00000000  00010ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021830  00000000  00000000  0001157a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d14  00000000  00000000  00032daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d179d  00000000  00000000  0003cabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e25b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002438  00000000  00000000  0010e2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000091  00000000  00000000  001106d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003888 	.word	0x08003888

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003888 	.word	0x08003888

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009b8:	f000 b96a 	b.w	8000c90 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	460c      	mov	r4, r1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d14e      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e0:	4694      	mov	ip, r2
 80009e2:	458c      	cmp	ip, r1
 80009e4:	4686      	mov	lr, r0
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	d962      	bls.n	8000ab2 <__udivmoddi4+0xde>
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0320 	rsb	r3, r2, #32
 80009f2:	4091      	lsls	r1, r2
 80009f4:	fa20 f303 	lsr.w	r3, r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	4319      	orrs	r1, r3
 80009fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a06:	fa1f f68c 	uxth.w	r6, ip
 8000a0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a12:	fb07 1114 	mls	r1, r7, r4, r1
 8000a16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a1a:	fb04 f106 	mul.w	r1, r4, r6
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a2a:	f080 8112 	bcs.w	8000c52 <__udivmoddi4+0x27e>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 810f 	bls.w	8000c52 <__udivmoddi4+0x27e>
 8000a34:	3c02      	subs	r4, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a59      	subs	r1, r3, r1
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a42:	fb07 1110 	mls	r1, r7, r0, r1
 8000a46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4a:	fb00 f606 	mul.w	r6, r0, r6
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	d90a      	bls.n	8000a68 <__udivmoddi4+0x94>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a5a:	f080 80fc 	bcs.w	8000c56 <__udivmoddi4+0x282>
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	f240 80f9 	bls.w	8000c56 <__udivmoddi4+0x282>
 8000a64:	4463      	add	r3, ip
 8000a66:	3802      	subs	r0, #2
 8000a68:	1b9b      	subs	r3, r3, r6
 8000a6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a6e:	2100      	movs	r1, #0
 8000a70:	b11d      	cbz	r5, 8000a7a <__udivmoddi4+0xa6>
 8000a72:	40d3      	lsrs	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d905      	bls.n	8000a8e <__udivmoddi4+0xba>
 8000a82:	b10d      	cbz	r5, 8000a88 <__udivmoddi4+0xb4>
 8000a84:	e9c5 0100 	strd	r0, r1, [r5]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e7f5      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000a8e:	fab3 f183 	clz	r1, r3
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d146      	bne.n	8000b24 <__udivmoddi4+0x150>
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	d302      	bcc.n	8000aa0 <__udivmoddi4+0xcc>
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	f0c0 80f0 	bcc.w	8000c80 <__udivmoddi4+0x2ac>
 8000aa0:	1a86      	subs	r6, r0, r2
 8000aa2:	eb64 0303 	sbc.w	r3, r4, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d0e6      	beq.n	8000a7a <__udivmoddi4+0xa6>
 8000aac:	e9c5 6300 	strd	r6, r3, [r5]
 8000ab0:	e7e3      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	f040 8090 	bne.w	8000bd8 <__udivmoddi4+0x204>
 8000ab8:	eba1 040c 	sub.w	r4, r1, ip
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa1f f78c 	uxth.w	r7, ip
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ace:	fb08 4416 	mls	r4, r8, r6, r4
 8000ad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ad6:	fb07 f006 	mul.w	r0, r7, r6
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x11c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x11a>
 8000ae8:	4298      	cmp	r0, r3
 8000aea:	f200 80cd 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000aee:	4626      	mov	r6, r4
 8000af0:	1a1c      	subs	r4, r3, r0
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000afa:	fb08 4410 	mls	r4, r8, r0, r4
 8000afe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b02:	fb00 f707 	mul.w	r7, r0, r7
 8000b06:	429f      	cmp	r7, r3
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x148>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x146>
 8000b14:	429f      	cmp	r7, r3
 8000b16:	f200 80b0 	bhi.w	8000c7a <__udivmoddi4+0x2a6>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	1bdb      	subs	r3, r3, r7
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	e7a5      	b.n	8000a70 <__udivmoddi4+0x9c>
 8000b24:	f1c1 0620 	rsb	r6, r1, #32
 8000b28:	408b      	lsls	r3, r1
 8000b2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2e:	431f      	orrs	r7, r3
 8000b30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b34:	fa04 f301 	lsl.w	r3, r4, r1
 8000b38:	ea43 030c 	orr.w	r3, r3, ip
 8000b3c:	40f4      	lsrs	r4, r6
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	0c38      	lsrs	r0, r7, #16
 8000b44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b48:	fbb4 fef0 	udiv	lr, r4, r0
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	fb00 441e 	mls	r4, r0, lr, r4
 8000b54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b58:	fb0e f90c 	mul.w	r9, lr, ip
 8000b5c:	45a1      	cmp	r9, r4
 8000b5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b62:	d90a      	bls.n	8000b7a <__udivmoddi4+0x1a6>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000b6a:	f080 8084 	bcs.w	8000c76 <__udivmoddi4+0x2a2>
 8000b6e:	45a1      	cmp	r9, r4
 8000b70:	f240 8081 	bls.w	8000c76 <__udivmoddi4+0x2a2>
 8000b74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b78:	443c      	add	r4, r7
 8000b7a:	eba4 0409 	sub.w	r4, r4, r9
 8000b7e:	fa1f f983 	uxth.w	r9, r3
 8000b82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b86:	fb00 4413 	mls	r4, r0, r3, r4
 8000b8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d907      	bls.n	8000ba6 <__udivmoddi4+0x1d2>
 8000b96:	193c      	adds	r4, r7, r4
 8000b98:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000b9c:	d267      	bcs.n	8000c6e <__udivmoddi4+0x29a>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0x29a>
 8000ba2:	3b02      	subs	r3, #2
 8000ba4:	443c      	add	r4, r7
 8000ba6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000baa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bae:	eba4 040c 	sub.w	r4, r4, ip
 8000bb2:	429c      	cmp	r4, r3
 8000bb4:	46ce      	mov	lr, r9
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	d351      	bcc.n	8000c5e <__udivmoddi4+0x28a>
 8000bba:	d04e      	beq.n	8000c5a <__udivmoddi4+0x286>
 8000bbc:	b155      	cbz	r5, 8000bd4 <__udivmoddi4+0x200>
 8000bbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000bc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bca:	40cb      	lsrs	r3, r1
 8000bcc:	431e      	orrs	r6, r3
 8000bce:	40cc      	lsrs	r4, r1
 8000bd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	e750      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000bd8:	f1c2 0320 	rsb	r3, r2, #32
 8000bdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	fa24 f303 	lsr.w	r3, r4, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	430c      	orrs	r4, r1
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf4:	fa1f f78c 	uxth.w	r7, ip
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000c00:	0c23      	lsrs	r3, r4, #16
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb00 f107 	mul.w	r1, r0, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x24c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c16:	d22c      	bcs.n	8000c72 <__udivmoddi4+0x29e>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d92a      	bls.n	8000c72 <__udivmoddi4+0x29e>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c28:	fb08 3311 	mls	r3, r8, r1, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb01 f307 	mul.w	r3, r1, r7
 8000c34:	42a3      	cmp	r3, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x276>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c40:	d213      	bcs.n	8000c6a <__udivmoddi4+0x296>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d911      	bls.n	8000c6a <__udivmoddi4+0x296>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	1ae4      	subs	r4, r4, r3
 8000c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c50:	e739      	b.n	8000ac6 <__udivmoddi4+0xf2>
 8000c52:	4604      	mov	r4, r0
 8000c54:	e6f0      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c56:	4608      	mov	r0, r1
 8000c58:	e706      	b.n	8000a68 <__udivmoddi4+0x94>
 8000c5a:	45c8      	cmp	r8, r9
 8000c5c:	d2ae      	bcs.n	8000bbc <__udivmoddi4+0x1e8>
 8000c5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7a8      	b.n	8000bbc <__udivmoddi4+0x1e8>
 8000c6a:	4631      	mov	r1, r6
 8000c6c:	e7ed      	b.n	8000c4a <__udivmoddi4+0x276>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e799      	b.n	8000ba6 <__udivmoddi4+0x1d2>
 8000c72:	4630      	mov	r0, r6
 8000c74:	e7d4      	b.n	8000c20 <__udivmoddi4+0x24c>
 8000c76:	46d6      	mov	lr, sl
 8000c78:	e77f      	b.n	8000b7a <__udivmoddi4+0x1a6>
 8000c7a:	4463      	add	r3, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	e74d      	b.n	8000b1c <__udivmoddi4+0x148>
 8000c80:	4606      	mov	r6, r0
 8000c82:	4623      	mov	r3, r4
 8000c84:	4608      	mov	r0, r1
 8000c86:	e70f      	b.n	8000aa8 <__udivmoddi4+0xd4>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	e730      	b.n	8000af0 <__udivmoddi4+0x11c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	0000      	movs	r0, r0
	...

08000c98 <GetSensorValAndTransfer>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char uartDataBuffer[50];

uint8_t GetSensorValAndTransfer(ADC_HandleTypeDef *hADC, uint32_t StdId)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b090      	sub	sp, #64	@ 0x40
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
	uint32_t RawSensorVal = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t tempVal, LightIntensityVal,alcoholVal;

	CAN_TxHeaderTypeDef SensorMsgTxHeader;
	SensorMsgTxHeader.DLC = 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
	SensorMsgTxHeader.RTR = CAN_RTR_DATA;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
	SensorMsgTxHeader.IDE = CAN_ID_STD;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
	SensorMsgTxHeader.StdId = StdId;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	617b      	str	r3, [r7, #20]
	SensorMsgTxHeader.ExtId = 0x0000;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
	SensorMsgTxHeader.TransmitGlobalTime = DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

	uint8_t SensorData[8] = {0,0,0,0,0,0,0,0};
 8000cc0:	4a57      	ldr	r2, [pc, #348]	@ (8000e20 <GetSensorValAndTransfer+0x188>)
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cca:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t TxMailBoxUsed;

	HAL_ADC_Start(hADC);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 fdaa 	bl	8001828 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(hADC, HAL_MAX_DELAY) == HAL_OK)
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 feaa 	bl	8001a32 <HAL_ADC_PollForConversion>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f040 808d 	bne.w	8000e00 <GetSensorValAndTransfer+0x168>
	{
		RawSensorVal = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RawSensorVal = HAL_ADC_GetValue(hADC);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 ff2c 	bl	8001b48 <HAL_ADC_GetValue>
 8000cf0:	63f8      	str	r0, [r7, #60]	@ 0x3c
		HAL_ADC_Stop(hADC);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 fe6a 	bl	80019cc <HAL_ADC_Stop>

		if(SensorMsgTxHeader.StdId == 0x0AB)
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	2bab      	cmp	r3, #171	@ 0xab
 8000cfc:	d13c      	bne.n	8000d78 <GetSensorValAndTransfer+0xe0>
		{
			float Vref = 3.3;
 8000cfe:	4b49      	ldr	r3, [pc, #292]	@ (8000e24 <GetSensorValAndTransfer+0x18c>)
 8000d00:	637b      	str	r3, [r7, #52]	@ 0x34
			float Vsense = (RawSensorVal*Vref)/4096;
 8000d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d0c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d14:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8000e28 <GetSensorValAndTransfer+0x190>
 8000d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d1c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			tempVal = ((Vsense-0.76)/0.0025) + 25;    // According to STM32 Datasheet
 8000d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000d22:	f7ff fbb5 	bl	8000490 <__aeabi_f2d>
 8000d26:	a33a      	add	r3, pc, #232	@ (adr r3, 8000e10 <GetSensorValAndTransfer+0x178>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	f7ff fa50 	bl	80001d0 <__aeabi_dsub>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4610      	mov	r0, r2
 8000d36:	4619      	mov	r1, r3
 8000d38:	a337      	add	r3, pc, #220	@ (adr r3, 8000e18 <GetSensorValAndTransfer+0x180>)
 8000d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3e:	f7ff fd29 	bl	8000794 <__aeabi_ddiv>
 8000d42:	4602      	mov	r2, r0
 8000d44:	460b      	mov	r3, r1
 8000d46:	4610      	mov	r0, r2
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f04f 0200 	mov.w	r2, #0
 8000d4e:	4b37      	ldr	r3, [pc, #220]	@ (8000e2c <GetSensorValAndTransfer+0x194>)
 8000d50:	f7ff fa40 	bl	80001d4 <__adddf3>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f7ff fe02 	bl	8000964 <__aeabi_d2uiz>
 8000d60:	4603      	mov	r3, r0
 8000d62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			//sprintf(uartDataBuffer,"tempSensorVal = %d\r\n",tempVal);
			//HAL_UART_Transmit(&huart2, (const uint8_t*)uartDataBuffer, strlen(uartDataBuffer), HAL_MAX_DELAY);

			SensorData[0] = tempVal;
 8000d66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d6a:	733b      	strb	r3, [r7, #12]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000d6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d70:	482f      	ldr	r0, [pc, #188]	@ (8000e30 <GetSensorValAndTransfer+0x198>)
 8000d72:	f001 fde6 	bl	8002942 <HAL_GPIO_TogglePin>
 8000d76:	e031      	b.n	8000ddc <GetSensorValAndTransfer+0x144>
		}else if(SensorMsgTxHeader.StdId == 0x0AC)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2bac      	cmp	r3, #172	@ 0xac
 8000d7c:	d115      	bne.n	8000daa <GetSensorValAndTransfer+0x112>
		{
			LightIntensityVal = (RawSensorVal*100)/4095;
 8000d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d80:	2264      	movs	r2, #100	@ 0x64
 8000d82:	fb03 f202 	mul.w	r2, r3, r2
 8000d86:	4b2b      	ldr	r3, [pc, #172]	@ (8000e34 <GetSensorValAndTransfer+0x19c>)
 8000d88:	fba3 1302 	umull	r1, r3, r3, r2
 8000d8c:	1ad2      	subs	r2, r2, r3
 8000d8e:	0852      	lsrs	r2, r2, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	0adb      	lsrs	r3, r3, #11
 8000d94:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
			//sprintf(uartDataBuffer,"LightIntensityVal = %d\r\n",LightIntensityVal);
			//HAL_UART_Transmit(&huart2, (const uint8_t*)uartDataBuffer, strlen(uartDataBuffer), HAL_MAX_DELAY);

			SensorData[0] = LightIntensityVal;
 8000d98:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000d9c:	733b      	strb	r3, [r7, #12]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000d9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000da2:	4823      	ldr	r0, [pc, #140]	@ (8000e30 <GetSensorValAndTransfer+0x198>)
 8000da4:	f001 fdcd 	bl	8002942 <HAL_GPIO_TogglePin>
 8000da8:	e018      	b.n	8000ddc <GetSensorValAndTransfer+0x144>
		}else if(SensorMsgTxHeader.StdId == 0x0AD)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2bad      	cmp	r3, #173	@ 0xad
 8000dae:	d115      	bne.n	8000ddc <GetSensorValAndTransfer+0x144>
		{
			alcoholVal = (RawSensorVal*1000)/4095;
 8000db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000db2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000db6:	fb03 f202 	mul.w	r2, r3, r2
 8000dba:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <GetSensorValAndTransfer+0x19c>)
 8000dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8000dc0:	1ad2      	subs	r2, r2, r3
 8000dc2:	0852      	lsrs	r2, r2, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	0adb      	lsrs	r3, r3, #11
 8000dc8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			//sprintf(uartDataBuffer,"alcoholVal = %d\r\n",alcoholVal);
			//HAL_UART_Transmit(&huart2, (const uint8_t*)uartDataBuffer, strlen(uartDataBuffer), HAL_MAX_DELAY);

			SensorData[0] = alcoholVal;
 8000dcc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000dd0:	733b      	strb	r3, [r7, #12]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000dd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dd6:	4816      	ldr	r0, [pc, #88]	@ (8000e30 <GetSensorValAndTransfer+0x198>)
 8000dd8:	f001 fdb3 	bl	8002942 <HAL_GPIO_TogglePin>
		}

		// add sensor value in available CAN1 TxMailbox for transmission over CAN Bus
		if(HAL_CAN_AddTxMessage(&hcan1, &SensorMsgTxHeader, SensorData, &TxMailBoxUsed) != HAL_OK)
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	f107 020c 	add.w	r2, r7, #12
 8000de4:	f107 0114 	add.w	r1, r7, #20
 8000de8:	4813      	ldr	r0, [pc, #76]	@ (8000e38 <GetSensorValAndTransfer+0x1a0>)
 8000dea:	f001 fa18 	bl	800221e <HAL_CAN_AddTxMessage>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <GetSensorValAndTransfer+0x160>
			Error_Handler();
 8000df4:	f000 fa80 	bl	80012f8 <Error_Handler>
		HAL_Delay(1000);
 8000df8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dfc:	f000 fcac 	bl	8001758 <HAL_Delay>
	}
	return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3740      	adds	r7, #64	@ 0x40
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	f3af 8000 	nop.w
 8000e10:	851eb852 	.word	0x851eb852
 8000e14:	3fe851eb 	.word	0x3fe851eb
 8000e18:	47ae147b 	.word	0x47ae147b
 8000e1c:	3f647ae1 	.word	0x3f647ae1
 8000e20:	080038a0 	.word	0x080038a0
 8000e24:	40533333 	.word	0x40533333
 8000e28:	45800000 	.word	0x45800000
 8000e2c:	40390000 	.word	0x40390000
 8000e30:	40020c00 	.word	0x40020c00
 8000e34:	00100101 	.word	0x00100101
 8000e38:	20000100 	.word	0x20000100

08000e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e40:	f000 fc18 	bl	8001674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e44:	f000 f838 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e48:	f000 f9f6 	bl	8001238 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000e4c:	f000 f994 	bl	8001178 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000e50:	f000 f89c 	bl	8000f8c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e54:	f000 f9c6 	bl	80011e4 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000e58:	f000 f8ea 	bl	8001030 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000e5c:	f000 f93a 	bl	80010d4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000e60:	4811      	ldr	r0, [pc, #68]	@ (8000ea8 <main+0x6c>)
 8000e62:	f001 f998 	bl	8002196 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8000e66:	2101      	movs	r1, #1
 8000e68:	480f      	ldr	r0, [pc, #60]	@ (8000ea8 <main+0x6c>)
 8000e6a:	f001 faa8 	bl	80023be <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // ADC1: Internal temp sensor channel
	  if(GetSensorValAndTransfer(&hadc1, 0x0AB) != HAL_OK)
 8000e6e:	21ab      	movs	r1, #171	@ 0xab
 8000e70:	480e      	ldr	r0, [pc, #56]	@ (8000eac <main+0x70>)
 8000e72:	f7ff ff11 	bl	8000c98 <GetSensorValAndTransfer>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <main+0x44>
		  Error_Handler();
 8000e7c:	f000 fa3c 	bl	80012f8 <Error_Handler>

	  // ADC2 IN0 Channel: LDR Sensor
	  if(GetSensorValAndTransfer(&hadc2, 0x0AC) != HAL_OK)
 8000e80:	21ac      	movs	r1, #172	@ 0xac
 8000e82:	480b      	ldr	r0, [pc, #44]	@ (8000eb0 <main+0x74>)
 8000e84:	f7ff ff08 	bl	8000c98 <GetSensorValAndTransfer>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <main+0x56>
		  Error_Handler();
 8000e8e:	f000 fa33 	bl	80012f8 <Error_Handler>

	  // ADC3 IN1 Channel: MQ3 Alcohol sensor
	  if(GetSensorValAndTransfer(&hadc3, 0x0AD) != HAL_OK)
 8000e92:	21ad      	movs	r1, #173	@ 0xad
 8000e94:	4807      	ldr	r0, [pc, #28]	@ (8000eb4 <main+0x78>)
 8000e96:	f7ff feff 	bl	8000c98 <GetSensorValAndTransfer>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0e6      	beq.n	8000e6e <main+0x32>
		  Error_Handler();
 8000ea0:	f000 fa2a 	bl	80012f8 <Error_Handler>
	  if(GetSensorValAndTransfer(&hadc1, 0x0AB) != HAL_OK)
 8000ea4:	e7e3      	b.n	8000e6e <main+0x32>
 8000ea6:	bf00      	nop
 8000ea8:	20000100 	.word	0x20000100
 8000eac:	20000028 	.word	0x20000028
 8000eb0:	20000070 	.word	0x20000070
 8000eb4:	200000b8 	.word	0x200000b8

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	@ 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	2230      	movs	r2, #48	@ 0x30
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fcb2 	bl	8003830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b28      	ldr	r3, [pc, #160]	@ (8000f84 <SystemClock_Config+0xcc>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	4a27      	ldr	r2, [pc, #156]	@ (8000f84 <SystemClock_Config+0xcc>)
 8000ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eec:	4b25      	ldr	r3, [pc, #148]	@ (8000f84 <SystemClock_Config+0xcc>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000f02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f14:	2301      	movs	r3, #1
 8000f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f2c:	2348      	movs	r3, #72	@ 0x48
 8000f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f34:	2307      	movs	r3, #7
 8000f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 fd1b 	bl	8002978 <HAL_RCC_OscConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f48:	f000 f9d6 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f50:	2302      	movs	r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 ff7c 	bl	8002e68 <HAL_RCC_ClockConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f76:	f000 f9bf 	bl	80012f8 <Error_Handler>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3750      	adds	r7, #80	@ 0x50
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40007000 	.word	0x40007000

08000f8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fa0:	4a21      	ldr	r2, [pc, #132]	@ (8001028 <MX_ADC1_Init+0x9c>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000faa:	4b1e      	ldr	r3, [pc, #120]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fca:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fcc:	4a17      	ldr	r2, [pc, #92]	@ (800102c <MX_ADC1_Init+0xa0>)
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	480e      	ldr	r0, [pc, #56]	@ (8001024 <MX_ADC1_Init+0x98>)
 8000fec:	f000 fbd8 	bl	80017a0 <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ff6:	f000 f97f 	bl	80012f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ffa:	2310      	movs	r3, #16
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <MX_ADC1_Init+0x98>)
 800100c:	f000 fdaa 	bl	8001b64 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001016:	f000 f96f 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000028 	.word	0x20000028
 8001028:	40012000 	.word	0x40012000
 800102c:	0f000001 	.word	0x0f000001

08001030 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001042:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <MX_ADC2_Init+0x98>)
 8001044:	4a21      	ldr	r2, [pc, #132]	@ (80010cc <MX_ADC2_Init+0x9c>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001048:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <MX_ADC2_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800104e:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <MX_ADC2_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <MX_ADC2_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800105a:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <MX_ADC2_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <MX_ADC2_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <MX_ADC2_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <MX_ADC2_Init+0x98>)
 8001070:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <MX_ADC2_Init+0xa0>)
 8001072:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <MX_ADC2_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <MX_ADC2_Init+0x98>)
 800107c:	2201      	movs	r2, #1
 800107e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_ADC2_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_ADC2_Init+0x98>)
 800108a:	2201      	movs	r2, #1
 800108c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800108e:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <MX_ADC2_Init+0x98>)
 8001090:	f000 fb86 	bl	80017a0 <HAL_ADC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 f92d 	bl	80012f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <MX_ADC2_Init+0x98>)
 80010b0:	f000 fd58 	bl	8001b64 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80010ba:	f000 f91d 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000070 	.word	0x20000070
 80010cc:	40012100 	.word	0x40012100
 80010d0:	0f000001 	.word	0x0f000001

080010d4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80010e6:	4b21      	ldr	r3, [pc, #132]	@ (800116c <MX_ADC3_Init+0x98>)
 80010e8:	4a21      	ldr	r2, [pc, #132]	@ (8001170 <MX_ADC3_Init+0x9c>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <MX_ADC3_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <MX_ADC3_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <MX_ADC3_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <MX_ADC3_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001104:	4b19      	ldr	r3, [pc, #100]	@ (800116c <MX_ADC3_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <MX_ADC3_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001112:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_ADC3_Init+0x98>)
 8001114:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <MX_ADC3_Init+0xa0>)
 8001116:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_ADC3_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_ADC3_Init+0x98>)
 8001120:	2201      	movs	r2, #1
 8001122:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_ADC3_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_ADC3_Init+0x98>)
 800112e:	2201      	movs	r2, #1
 8001130:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001132:	480e      	ldr	r0, [pc, #56]	@ (800116c <MX_ADC3_Init+0x98>)
 8001134:	f000 fb34 	bl	80017a0 <HAL_ADC_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800113e:	f000 f8db 	bl	80012f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001142:	2301      	movs	r3, #1
 8001144:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001146:	2301      	movs	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	@ (800116c <MX_ADC3_Init+0x98>)
 8001154:	f000 fd06 	bl	8001b64 <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800115e:	f000 f8cb 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000b8 	.word	0x200000b8
 8001170:	40012200 	.word	0x40012200
 8001174:	0f000001 	.word	0x0f000001

08001178 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <MX_CAN1_Init+0x64>)
 800117e:	4a18      	ldr	r2, [pc, #96]	@ (80011e0 <MX_CAN1_Init+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001182:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <MX_CAN1_Init+0x64>)
 8001184:	2212      	movs	r2, #18
 8001186:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_CAN1_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <MX_CAN1_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_CAN1_Init+0x64>)
 8001196:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800119a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_CAN1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_CAN1_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_CAN1_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_CAN1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_CAN1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_CAN1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_CAN1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_CAN1_Init+0x64>)
 80011c8:	f000 feea 	bl	8001fa0 <HAL_CAN_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80011d2:	f000 f891 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000100 	.word	0x20000100
 80011e0:	40006400 	.word	0x40006400

080011e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <MX_USART2_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 800121c:	f002 f844 	bl	80032a8 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f000 f867 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000128 	.word	0x20000128
 8001234:	40004400 	.word	0x40004400

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a26      	ldr	r2, [pc, #152]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a1f      	ldr	r2, [pc, #124]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a18      	ldr	r2, [pc, #96]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80012c4:	480b      	ldr	r0, [pc, #44]	@ (80012f4 <MX_GPIO_Init+0xbc>)
 80012c6:	f001 fb23 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012ca:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <MX_GPIO_Init+0xbc>)
 80012e4:	f001 f978 	bl	80025d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020c00 	.word	0x40020c00

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001300:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <Error_Handler+0x1c>)
 8001306:	f001 fb1c 	bl	8002942 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 800130a:	20c8      	movs	r0, #200	@ 0xc8
 800130c:	f000 fa24 	bl	8001758 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001310:	bf00      	nop
 8001312:	e7f5      	b.n	8001300 <Error_Handler+0x8>
 8001314:	40020c00 	.word	0x40020c00

08001318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	4a0f      	ldr	r2, [pc, #60]	@ (8001364 <HAL_MspInit+0x4c>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132c:	6453      	str	r3, [r2, #68]	@ 0x44
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a08      	ldr	r2, [pc, #32]	@ (8001364 <HAL_MspInit+0x4c>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001356:	2007      	movs	r0, #7
 8001358:	f001 f90a 	bl	8002570 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800

08001368 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	@ 0x30
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a38      	ldr	r2, [pc, #224]	@ (8001468 <HAL_ADC_MspInit+0x100>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d10e      	bne.n	80013a8 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	4b37      	ldr	r3, [pc, #220]	@ (800146c <HAL_ADC_MspInit+0x104>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	4a36      	ldr	r2, [pc, #216]	@ (800146c <HAL_ADC_MspInit+0x104>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001398:	6453      	str	r3, [r2, #68]	@ 0x44
 800139a:	4b34      	ldr	r3, [pc, #208]	@ (800146c <HAL_ADC_MspInit+0x104>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80013a6:	e05a      	b.n	800145e <HAL_ADC_MspInit+0xf6>
  else if(hadc->Instance==ADC2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a30      	ldr	r2, [pc, #192]	@ (8001470 <HAL_ADC_MspInit+0x108>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d128      	bne.n	8001404 <HAL_ADC_MspInit+0x9c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	4b2d      	ldr	r3, [pc, #180]	@ (800146c <HAL_ADC_MspInit+0x104>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	4a2c      	ldr	r2, [pc, #176]	@ (800146c <HAL_ADC_MspInit+0x104>)
 80013bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c2:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <HAL_ADC_MspInit+0x104>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b26      	ldr	r3, [pc, #152]	@ (800146c <HAL_ADC_MspInit+0x104>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a25      	ldr	r2, [pc, #148]	@ (800146c <HAL_ADC_MspInit+0x104>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b23      	ldr	r3, [pc, #140]	@ (800146c <HAL_ADC_MspInit+0x104>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ee:	2303      	movs	r3, #3
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	481d      	ldr	r0, [pc, #116]	@ (8001474 <HAL_ADC_MspInit+0x10c>)
 80013fe:	f001 f8eb 	bl	80025d8 <HAL_GPIO_Init>
}
 8001402:	e02c      	b.n	800145e <HAL_ADC_MspInit+0xf6>
  else if(hadc->Instance==ADC3)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a1b      	ldr	r2, [pc, #108]	@ (8001478 <HAL_ADC_MspInit+0x110>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d127      	bne.n	800145e <HAL_ADC_MspInit+0xf6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_ADC_MspInit+0x104>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	4a15      	ldr	r2, [pc, #84]	@ (800146c <HAL_ADC_MspInit+0x104>)
 8001418:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141c:	6453      	str	r3, [r2, #68]	@ 0x44
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_ADC_MspInit+0x104>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <HAL_ADC_MspInit+0x104>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a0e      	ldr	r2, [pc, #56]	@ (800146c <HAL_ADC_MspInit+0x104>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <HAL_ADC_MspInit+0x104>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001446:	2302      	movs	r3, #2
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4806      	ldr	r0, [pc, #24]	@ (8001474 <HAL_ADC_MspInit+0x10c>)
 800145a:	f001 f8bd 	bl	80025d8 <HAL_GPIO_Init>
}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	@ 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40012000 	.word	0x40012000
 800146c:	40023800 	.word	0x40023800
 8001470:	40012100 	.word	0x40012100
 8001474:	40020000 	.word	0x40020000
 8001478:	40012200 	.word	0x40012200

0800147c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	@ (8001500 <HAL_CAN_MspInit+0x84>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12c      	bne.n	80014f8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <HAL_CAN_MspInit+0x88>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a17      	ldr	r2, [pc, #92]	@ (8001504 <HAL_CAN_MspInit+0x88>)
 80014a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_CAN_MspInit+0x88>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <HAL_CAN_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a10      	ldr	r2, [pc, #64]	@ (8001504 <HAL_CAN_MspInit+0x88>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <HAL_CAN_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014e8:	2309      	movs	r3, #9
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <HAL_CAN_MspInit+0x8c>)
 80014f4:	f001 f870 	bl	80025d8 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	@ 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40006400 	.word	0x40006400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020400 	.word	0x40020400

0800150c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <HAL_UART_MspInit+0x84>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12b      	bne.n	8001586 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <HAL_UART_MspInit+0x88>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a17      	ldr	r2, [pc, #92]	@ (8001594 <HAL_UART_MspInit+0x88>)
 8001538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <HAL_UART_MspInit+0x88>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <HAL_UART_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a10      	ldr	r2, [pc, #64]	@ (8001594 <HAL_UART_MspInit+0x88>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <HAL_UART_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001566:	230c      	movs	r3, #12
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001576:	2307      	movs	r3, #7
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	@ (8001598 <HAL_UART_MspInit+0x8c>)
 8001582:	f001 f829 	bl	80025d8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	@ 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40004400 	.word	0x40004400
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <NMI_Handler+0x4>

080015a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <MemManage_Handler+0x4>

080015b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f2:	f000 f891 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <SystemInit+0x20>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001606:	4a05      	ldr	r2, [pc, #20]	@ (800161c <SystemInit+0x20>)
 8001608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800160c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001658 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001624:	f7ff ffea 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	@ (800165c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	@ (8001660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	@ (800166c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f002 f8f7 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001652:	f7ff fbf3 	bl	8000e3c <main>
  bx  lr    
 8001656:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001664:	080038d0 	.word	0x080038d0
  ldr r2, =_sbss
 8001668:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800166c:	20000174 	.word	0x20000174

08001670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001678:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <HAL_Init+0x40>)
 800167e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001684:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <HAL_Init+0x40>)
 800168a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800168e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	@ (80016b4 <HAL_Init+0x40>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 ff67 	bl	8002570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fe36 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 ff71 	bl	80025be <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016f4:	f000 ff47 	bl	8002586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	@ (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000000 	.word	0x20000000
 8001710:	20000008 	.word	0x20000008
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	@ (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008
 800173c:	20000170 	.word	0x20000170

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000170 	.word	0x20000170

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000008 	.word	0x20000008

080017a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e033      	b.n	800181e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fdd2 	bl	8001368 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d118      	bne.n	8001810 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017e6:	f023 0302 	bic.w	r3, r3, #2
 80017ea:	f043 0202 	orr.w	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fad8 	bl	8001da8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	641a      	str	r2, [r3, #64]	@ 0x40
 800180e:	e001      	b.n	8001814 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_ADC_Start+0x1a>
 800183e:	2302      	movs	r3, #2
 8001840:	e0b2      	b.n	80019a8 <HAL_ADC_Start+0x180>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b01      	cmp	r3, #1
 8001856:	d018      	beq.n	800188a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001868:	4b52      	ldr	r3, [pc, #328]	@ (80019b4 <HAL_ADC_Start+0x18c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a52      	ldr	r2, [pc, #328]	@ (80019b8 <HAL_ADC_Start+0x190>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0c9a      	lsrs	r2, r3, #18
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800187c:	e002      	b.n	8001884 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3b01      	subs	r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f9      	bne.n	800187e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	d17a      	bne.n	800198e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018d6:	d106      	bne.n	80018e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018dc:	f023 0206 	bic.w	r2, r3, #6
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80018e4:	e002      	b.n	80018ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018f4:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <HAL_ADC_Start+0x194>)
 80018f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001900:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2b00      	cmp	r3, #0
 800190c:	d12a      	bne.n	8001964 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2b      	ldr	r2, [pc, #172]	@ (80019c0 <HAL_ADC_Start+0x198>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d015      	beq.n	8001944 <HAL_ADC_Start+0x11c>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a29      	ldr	r2, [pc, #164]	@ (80019c4 <HAL_ADC_Start+0x19c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d105      	bne.n	800192e <HAL_ADC_Start+0x106>
 8001922:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <HAL_ADC_Start+0x194>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00a      	beq.n	8001944 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a25      	ldr	r2, [pc, #148]	@ (80019c8 <HAL_ADC_Start+0x1a0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d136      	bne.n	80019a6 <HAL_ADC_Start+0x17e>
 8001938:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <HAL_ADC_Start+0x194>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	d130      	bne.n	80019a6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d129      	bne.n	80019a6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	e020      	b.n	80019a6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a15      	ldr	r2, [pc, #84]	@ (80019c0 <HAL_ADC_Start+0x198>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d11b      	bne.n	80019a6 <HAL_ADC_Start+0x17e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d114      	bne.n	80019a6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	e00b      	b.n	80019a6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f043 0210 	orr.w	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f043 0201 	orr.w	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	20000000 	.word	0x20000000
 80019b8:	431bde83 	.word	0x431bde83
 80019bc:	40012300 	.word	0x40012300
 80019c0:	40012000 	.word	0x40012000
 80019c4:	40012100 	.word	0x40012100
 80019c8:	40012200 	.word	0x40012200

080019cc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Stop+0x16>
 80019de:	2302      	movs	r3, #2
 80019e0:	e021      	b.n	8001a26 <HAL_ADC_Stop+0x5a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a4e:	d113      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a5e:	d10b      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f043 0220 	orr.w	r2, r3, #32
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e063      	b.n	8001b40 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a78:	f7ff fe62 	bl	8001740 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a7e:	e021      	b.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a86:	d01d      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_ADC_PollForConversion+0x6c>
 8001a8e:	f7ff fe57 	bl	8001740 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d212      	bcs.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d00b      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f043 0204 	orr.w	r2, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e03d      	b.n	8001b40 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d1d6      	bne.n	8001a80 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0212 	mvn.w	r2, #18
 8001ada:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d123      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d11f      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d111      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x1c>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e105      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x228>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	d925      	bls.n	8001bdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68d9      	ldr	r1, [r3, #12]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b1e      	subs	r3, #30
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43da      	mvns	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68d9      	ldr	r1, [r3, #12]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4603      	mov	r3, r0
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4403      	add	r3, r0
 8001bce:	3b1e      	subs	r3, #30
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	e022      	b.n	8001c22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6919      	ldr	r1, [r3, #16]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4403      	add	r3, r0
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d824      	bhi.n	8001c74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b05      	subs	r3, #5
 8001c3c:	221f      	movs	r2, #31
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	400a      	ands	r2, r1
 8001c4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3b05      	subs	r3, #5
 8001c66:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c72:	e04c      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	d824      	bhi.n	8001cc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3b23      	subs	r3, #35	@ 0x23
 8001c8e:	221f      	movs	r2, #31
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43da      	mvns	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3b23      	subs	r3, #35	@ 0x23
 8001cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cc4:	e023      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b41      	subs	r3, #65	@ 0x41
 8001cd8:	221f      	movs	r2, #31
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b41      	subs	r3, #65	@ 0x41
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <HAL_ADC_ConfigChannel+0x234>)
 8001d10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a21      	ldr	r2, [pc, #132]	@ (8001d9c <HAL_ADC_ConfigChannel+0x238>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d109      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1cc>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b12      	cmp	r3, #18
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <HAL_ADC_ConfigChannel+0x238>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d123      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d003      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x1e6>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b11      	cmp	r3, #17
 8001d48:	d11b      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d111      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d5e:	4b10      	ldr	r3, [pc, #64]	@ (8001da0 <HAL_ADC_ConfigChannel+0x23c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a10      	ldr	r2, [pc, #64]	@ (8001da4 <HAL_ADC_ConfigChannel+0x240>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	0c9a      	lsrs	r2, r3, #18
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d74:	e002      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	40012000 	.word	0x40012000
 8001da0:	20000000 	.word	0x20000000
 8001da4:	431bde83 	.word	0x431bde83

08001da8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db0:	4b79      	ldr	r3, [pc, #484]	@ (8001f98 <ADC_Init+0x1f0>)
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ddc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	021a      	lsls	r2, r3, #8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6899      	ldr	r1, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	4a58      	ldr	r2, [pc, #352]	@ (8001f9c <ADC_Init+0x1f4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d022      	beq.n	8001e86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6899      	ldr	r1, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	e00f      	b.n	8001ea6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ea4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0202 	bic.w	r2, r2, #2
 8001eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
 8001ec0:	005a      	lsls	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ee2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ef2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	3b01      	subs	r3, #1
 8001f00:	035a      	lsls	r2, r3, #13
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	e007      	b.n	8001f1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f1a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	051a      	lsls	r2, r3, #20
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f5e:	025a      	lsls	r2, r3, #9
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	029a      	lsls	r2, r3, #10
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	609a      	str	r2, [r3, #8]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	0f000001 	.word	0x0f000001

08001fa0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0ed      	b.n	800218e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fa5c 	bl	800147c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd4:	f7ff fbb4 	bl	8001740 <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fda:	e012      	b.n	8002002 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fdc:	f7ff fbb0 	bl	8001740 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b0a      	cmp	r3, #10
 8001fe8:	d90b      	bls.n	8002002 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0c5      	b.n	800218e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0e5      	beq.n	8001fdc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0202 	bic.w	r2, r2, #2
 800201e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002020:	f7ff fb8e 	bl	8001740 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002026:	e012      	b.n	800204e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002028:	f7ff fb8a 	bl	8001740 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b0a      	cmp	r3, #10
 8002034:	d90b      	bls.n	800204e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2205      	movs	r2, #5
 8002046:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e09f      	b.n	800218e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1e5      	bne.n	8002028 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7e1b      	ldrb	r3, [r3, #24]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d108      	bne.n	8002076 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e007      	b.n	8002086 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7e5b      	ldrb	r3, [r3, #25]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d108      	bne.n	80020a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e007      	b.n	80020b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7e9b      	ldrb	r3, [r3, #26]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d108      	bne.n	80020ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0220 	orr.w	r2, r2, #32
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e007      	b.n	80020da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0220 	bic.w	r2, r2, #32
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7edb      	ldrb	r3, [r3, #27]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d108      	bne.n	80020f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0210 	bic.w	r2, r2, #16
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	e007      	b.n	8002104 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0210 	orr.w	r2, r2, #16
 8002102:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7f1b      	ldrb	r3, [r3, #28]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d108      	bne.n	800211e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0208 	orr.w	r2, r2, #8
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e007      	b.n	800212e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0208 	bic.w	r2, r2, #8
 800212c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7f5b      	ldrb	r3, [r3, #29]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d108      	bne.n	8002148 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0204 	orr.w	r2, r2, #4
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e007      	b.n	8002158 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0204 	bic.w	r2, r2, #4
 8002156:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	ea42 0103 	orr.w	r1, r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	1e5a      	subs	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d12e      	bne.n	8002208 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021c2:	f7ff fabd 	bl	8001740 <HAL_GetTick>
 80021c6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021c8:	e012      	b.n	80021f0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021ca:	f7ff fab9 	bl	8001740 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b0a      	cmp	r3, #10
 80021d6:	d90b      	bls.n	80021f0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2205      	movs	r2, #5
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e012      	b.n	8002216 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1e5      	bne.n	80021ca <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e006      	b.n	8002216 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800221e:	b480      	push	{r7}
 8002220:	b089      	sub	sp, #36	@ 0x24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002232:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800223c:	7ffb      	ldrb	r3, [r7, #31]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d003      	beq.n	800224a <HAL_CAN_AddTxMessage+0x2c>
 8002242:	7ffb      	ldrb	r3, [r7, #31]
 8002244:	2b02      	cmp	r3, #2
 8002246:	f040 80ad 	bne.w	80023a4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10a      	bne.n	800226a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8095 	beq.w	8002394 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	0e1b      	lsrs	r3, r3, #24
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002274:	2201      	movs	r2, #1
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	409a      	lsls	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10d      	bne.n	80022a2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002290:	68f9      	ldr	r1, [r7, #12]
 8002292:	6809      	ldr	r1, [r1, #0]
 8002294:	431a      	orrs	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3318      	adds	r3, #24
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	440b      	add	r3, r1
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	e00f      	b.n	80022c2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022b2:	68f9      	ldr	r1, [r7, #12]
 80022b4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022b6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	3318      	adds	r3, #24
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	440b      	add	r3, r1
 80022c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3318      	adds	r3, #24
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	440b      	add	r3, r1
 80022d2:	3304      	adds	r3, #4
 80022d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	7d1b      	ldrb	r3, [r3, #20]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d111      	bne.n	8002302 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3318      	adds	r3, #24
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	4413      	add	r3, r2
 80022ea:	3304      	adds	r3, #4
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	6811      	ldr	r1, [r2, #0]
 80022f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3318      	adds	r3, #24
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	440b      	add	r3, r1
 80022fe:	3304      	adds	r3, #4
 8002300:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3307      	adds	r3, #7
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	061a      	lsls	r2, r3, #24
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3306      	adds	r3, #6
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3305      	adds	r3, #5
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	4313      	orrs	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	3204      	adds	r2, #4
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	4610      	mov	r0, r2
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	6811      	ldr	r1, [r2, #0]
 800232a:	ea43 0200 	orr.w	r2, r3, r0
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	440b      	add	r3, r1
 8002334:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002338:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3303      	adds	r3, #3
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	061a      	lsls	r2, r3, #24
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3302      	adds	r3, #2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	041b      	lsls	r3, r3, #16
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3301      	adds	r3, #1
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	4313      	orrs	r3, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	7812      	ldrb	r2, [r2, #0]
 800235a:	4610      	mov	r0, r2
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	6811      	ldr	r1, [r2, #0]
 8002360:	ea43 0200 	orr.w	r2, r3, r0
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	440b      	add	r3, r1
 800236a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800236e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3318      	adds	r3, #24
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	4413      	add	r3, r2
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	6811      	ldr	r1, [r2, #0]
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3318      	adds	r3, #24
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	440b      	add	r3, r1
 800238e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	e00e      	b.n	80023b2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e006      	b.n	80023b2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	@ 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023be:	b480      	push	{r7}
 80023c0:	b085      	sub	sp, #20
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d002      	beq.n	80023dc <HAL_CAN_ActivateNotification+0x1e>
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d109      	bne.n	80023f0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6959      	ldr	r1, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e006      	b.n	80023fe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800243c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243e:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	60d3      	str	r3, [r2, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	6039      	str	r1, [r7, #0]
 800247a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	2b00      	cmp	r3, #0
 8002482:	db0a      	blt.n	800249a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	490c      	ldr	r1, [pc, #48]	@ (80024bc <__NVIC_SetPriority+0x4c>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	0112      	lsls	r2, r2, #4
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	440b      	add	r3, r1
 8002494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002498:	e00a      	b.n	80024b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4908      	ldr	r1, [pc, #32]	@ (80024c0 <__NVIC_SetPriority+0x50>)
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	3b04      	subs	r3, #4
 80024a8:	0112      	lsls	r2, r2, #4
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	440b      	add	r3, r1
 80024ae:	761a      	strb	r2, [r3, #24]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000e100 	.word	0xe000e100
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	@ 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f1c3 0307 	rsb	r3, r3, #7
 80024de:	2b04      	cmp	r3, #4
 80024e0:	bf28      	it	cs
 80024e2:	2304      	movcs	r3, #4
 80024e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2b06      	cmp	r3, #6
 80024ec:	d902      	bls.n	80024f4 <NVIC_EncodePriority+0x30>
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3b03      	subs	r3, #3
 80024f2:	e000      	b.n	80024f6 <NVIC_EncodePriority+0x32>
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	401a      	ands	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800250c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	43d9      	mvns	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	4313      	orrs	r3, r2
         );
}
 800251e:	4618      	mov	r0, r3
 8002520:	3724      	adds	r7, #36	@ 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800253c:	d301      	bcc.n	8002542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800253e:	2301      	movs	r3, #1
 8002540:	e00f      	b.n	8002562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002542:	4a0a      	ldr	r2, [pc, #40]	@ (800256c <SysTick_Config+0x40>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254a:	210f      	movs	r1, #15
 800254c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002550:	f7ff ff8e 	bl	8002470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002554:	4b05      	ldr	r3, [pc, #20]	@ (800256c <SysTick_Config+0x40>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255a:	4b04      	ldr	r3, [pc, #16]	@ (800256c <SysTick_Config+0x40>)
 800255c:	2207      	movs	r2, #7
 800255e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	e000e010 	.word	0xe000e010

08002570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff47 	bl	800240c <__NVIC_SetPriorityGrouping>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002598:	f7ff ff5c 	bl	8002454 <__NVIC_GetPriorityGrouping>
 800259c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f7ff ff8e 	bl	80024c4 <NVIC_EncodePriority>
 80025a8:	4602      	mov	r2, r0
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff5d 	bl	8002470 <__NVIC_SetPriority>
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ffb0 	bl	800252c <SysTick_Config>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	@ 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	e16b      	b.n	80028cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	f040 815a 	bne.w	80028c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d005      	beq.n	800262a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002626:	2b02      	cmp	r3, #2
 8002628:	d130      	bne.n	800268c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2203      	movs	r2, #3
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 0201 	and.w	r2, r3, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b03      	cmp	r3, #3
 8002696:	d017      	beq.n	80026c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d123      	bne.n	800271c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	08da      	lsrs	r2, r3, #3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3208      	adds	r2, #8
 80026dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	220f      	movs	r2, #15
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	08da      	lsrs	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3208      	adds	r2, #8
 8002716:	69b9      	ldr	r1, [r7, #24]
 8002718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0203 	and.w	r2, r3, #3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80b4 	beq.w	80028c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b60      	ldr	r3, [pc, #384]	@ (80028e4 <HAL_GPIO_Init+0x30c>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	4a5f      	ldr	r2, [pc, #380]	@ (80028e4 <HAL_GPIO_Init+0x30c>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800276c:	6453      	str	r3, [r2, #68]	@ 0x44
 800276e:	4b5d      	ldr	r3, [pc, #372]	@ (80028e4 <HAL_GPIO_Init+0x30c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277a:	4a5b      	ldr	r2, [pc, #364]	@ (80028e8 <HAL_GPIO_Init+0x310>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	220f      	movs	r2, #15
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a52      	ldr	r2, [pc, #328]	@ (80028ec <HAL_GPIO_Init+0x314>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02b      	beq.n	80027fe <HAL_GPIO_Init+0x226>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a51      	ldr	r2, [pc, #324]	@ (80028f0 <HAL_GPIO_Init+0x318>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d025      	beq.n	80027fa <HAL_GPIO_Init+0x222>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a50      	ldr	r2, [pc, #320]	@ (80028f4 <HAL_GPIO_Init+0x31c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01f      	beq.n	80027f6 <HAL_GPIO_Init+0x21e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4f      	ldr	r2, [pc, #316]	@ (80028f8 <HAL_GPIO_Init+0x320>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d019      	beq.n	80027f2 <HAL_GPIO_Init+0x21a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4e      	ldr	r2, [pc, #312]	@ (80028fc <HAL_GPIO_Init+0x324>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0x216>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002900 <HAL_GPIO_Init+0x328>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00d      	beq.n	80027ea <HAL_GPIO_Init+0x212>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002904 <HAL_GPIO_Init+0x32c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x20e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002908 <HAL_GPIO_Init+0x330>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_GPIO_Init+0x20a>
 80027de:	2307      	movs	r3, #7
 80027e0:	e00e      	b.n	8002800 <HAL_GPIO_Init+0x228>
 80027e2:	2308      	movs	r3, #8
 80027e4:	e00c      	b.n	8002800 <HAL_GPIO_Init+0x228>
 80027e6:	2306      	movs	r3, #6
 80027e8:	e00a      	b.n	8002800 <HAL_GPIO_Init+0x228>
 80027ea:	2305      	movs	r3, #5
 80027ec:	e008      	b.n	8002800 <HAL_GPIO_Init+0x228>
 80027ee:	2304      	movs	r3, #4
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x228>
 80027f2:	2303      	movs	r3, #3
 80027f4:	e004      	b.n	8002800 <HAL_GPIO_Init+0x228>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_Init+0x228>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x228>
 80027fe:	2300      	movs	r3, #0
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f002 0203 	and.w	r2, r2, #3
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	4093      	lsls	r3, r2
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002810:	4935      	ldr	r1, [pc, #212]	@ (80028e8 <HAL_GPIO_Init+0x310>)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281e:	4b3b      	ldr	r3, [pc, #236]	@ (800290c <HAL_GPIO_Init+0x334>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002842:	4a32      	ldr	r2, [pc, #200]	@ (800290c <HAL_GPIO_Init+0x334>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002848:	4b30      	ldr	r3, [pc, #192]	@ (800290c <HAL_GPIO_Init+0x334>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800286c:	4a27      	ldr	r2, [pc, #156]	@ (800290c <HAL_GPIO_Init+0x334>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002872:	4b26      	ldr	r3, [pc, #152]	@ (800290c <HAL_GPIO_Init+0x334>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002896:	4a1d      	ldr	r2, [pc, #116]	@ (800290c <HAL_GPIO_Init+0x334>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_GPIO_Init+0x334>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c0:	4a12      	ldr	r2, [pc, #72]	@ (800290c <HAL_GPIO_Init+0x334>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b0f      	cmp	r3, #15
 80028d0:	f67f ae90 	bls.w	80025f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3724      	adds	r7, #36	@ 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40021400 	.word	0x40021400
 8002904:	40021800 	.word	0x40021800
 8002908:	40021c00 	.word	0x40021c00
 800290c:	40013c00 	.word	0x40013c00

08002910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002920:	787b      	ldrb	r3, [r7, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800292c:	e003      	b.n	8002936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	041a      	lsls	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	619a      	str	r2, [r3, #24]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002942:	b480      	push	{r7}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	460b      	mov	r3, r1
 800294c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002954:	887a      	ldrh	r2, [r7, #2]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4013      	ands	r3, r2
 800295a:	041a      	lsls	r2, r3, #16
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	43d9      	mvns	r1, r3
 8002960:	887b      	ldrh	r3, [r7, #2]
 8002962:	400b      	ands	r3, r1
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	619a      	str	r2, [r3, #24]
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e267      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d075      	beq.n	8002a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002996:	4b88      	ldr	r3, [pc, #544]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d00c      	beq.n	80029bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a2:	4b85      	ldr	r3, [pc, #532]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d112      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ae:	4b82      	ldr	r3, [pc, #520]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ba:	d10b      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d05b      	beq.n	8002a80 <HAL_RCC_OscConfig+0x108>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d157      	bne.n	8002a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e242      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029dc:	d106      	bne.n	80029ec <HAL_RCC_OscConfig+0x74>
 80029de:	4b76      	ldr	r3, [pc, #472]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a75      	ldr	r2, [pc, #468]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e01d      	b.n	8002a28 <HAL_RCC_OscConfig+0xb0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x98>
 80029f6:	4b70      	ldr	r3, [pc, #448]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6f      	ldr	r2, [pc, #444]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a6c      	ldr	r2, [pc, #432]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0xb0>
 8002a10:	4b69      	ldr	r3, [pc, #420]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a68      	ldr	r2, [pc, #416]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	4b66      	ldr	r3, [pc, #408]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a65      	ldr	r2, [pc, #404]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fe86 	bl	8001740 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7fe fe82 	bl	8001740 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	@ 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e207      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0xc0>
 8002a56:	e014      	b.n	8002a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe fe72 	bl	8001740 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a60:	f7fe fe6e 	bl	8001740 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	@ 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e1f3      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	4b51      	ldr	r3, [pc, #324]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0xe8>
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d063      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9a:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d11c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa6:	4b44      	ldr	r3, [pc, #272]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d116      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	4b41      	ldr	r3, [pc, #260]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_RCC_OscConfig+0x152>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e1c7      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4937      	ldr	r1, [pc, #220]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	e03a      	b.n	8002b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae8:	4b34      	ldr	r3, [pc, #208]	@ (8002bbc <HAL_RCC_OscConfig+0x244>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe fe27 	bl	8001740 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7fe fe23 	bl	8001740 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1a8      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	4b28      	ldr	r3, [pc, #160]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4925      	ldr	r1, [pc, #148]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]
 8002b28:	e015      	b.n	8002b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2a:	4b24      	ldr	r3, [pc, #144]	@ (8002bbc <HAL_RCC_OscConfig+0x244>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fe06 	bl	8001740 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b38:	f7fe fe02 	bl	8001740 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e187      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d036      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <HAL_RCC_OscConfig+0x248>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fe fde6 	bl	8001740 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b78:	f7fe fde2 	bl	8001740 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e167      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x200>
 8002b96:	e01b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_OscConfig+0x248>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7fe fdcf 	bl	8001740 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	e00e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7fe fdcb 	bl	8001740 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d907      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e150      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	42470000 	.word	0x42470000
 8002bc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	4b88      	ldr	r3, [pc, #544]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ea      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8097 	beq.w	8002d0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be2:	4b81      	ldr	r3, [pc, #516]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b7d      	ldr	r3, [pc, #500]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	4a7c      	ldr	r2, [pc, #496]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfe:	4b7a      	ldr	r3, [pc, #488]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b77      	ldr	r3, [pc, #476]	@ (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d118      	bne.n	8002c4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1a:	4b74      	ldr	r3, [pc, #464]	@ (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a73      	ldr	r2, [pc, #460]	@ (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c26:	f7fe fd8b 	bl	8001740 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7fe fd87 	bl	8001740 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e10c      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	4b6a      	ldr	r3, [pc, #424]	@ (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x2ea>
 8002c54:	4b64      	ldr	r3, [pc, #400]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c58:	4a63      	ldr	r2, [pc, #396]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c60:	e01c      	b.n	8002c9c <HAL_RCC_OscConfig+0x324>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x30c>
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	4a5e      	ldr	r2, [pc, #376]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c76:	4b5c      	ldr	r3, [pc, #368]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7a:	4a5b      	ldr	r2, [pc, #364]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0x324>
 8002c84:	4b58      	ldr	r3, [pc, #352]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	4a57      	ldr	r2, [pc, #348]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c90:	4b55      	ldr	r3, [pc, #340]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c94:	4a54      	ldr	r2, [pc, #336]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f023 0304 	bic.w	r3, r3, #4
 8002c9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d015      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe fd4c 	bl	8001740 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fe fd48 	bl	8001740 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0cb      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc2:	4b49      	ldr	r3, [pc, #292]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ee      	beq.n	8002cac <HAL_RCC_OscConfig+0x334>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd0:	f7fe fd36 	bl	8001740 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fd32 	bl	8001740 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0b5      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cee:	4b3e      	ldr	r3, [pc, #248]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ee      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b39      	ldr	r3, [pc, #228]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	4a38      	ldr	r2, [pc, #224]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a1 	beq.w	8002e58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d16:	4b34      	ldr	r3, [pc, #208]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d05c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d141      	bne.n	8002dae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <HAL_RCC_OscConfig+0x478>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe fd06 	bl	8001740 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fe fd02 	bl	8001740 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e087      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	019b      	lsls	r3, r3, #6
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	061b      	lsls	r3, r3, #24
 8002d7a:	491b      	ldr	r1, [pc, #108]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_RCC_OscConfig+0x478>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe fcdb 	bl	8001740 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7fe fcd7 	bl	8001740 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e05c      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da0:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x416>
 8002dac:	e054      	b.n	8002e58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <HAL_RCC_OscConfig+0x478>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe fcc4 	bl	8001740 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe fcc0 	bl	8001740 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e045      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x444>
 8002dda:	e03d      	b.n	8002e58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e038      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000
 8002df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <HAL_RCC_OscConfig+0x4ec>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d028      	beq.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d121      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d11a      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e24:	4013      	ands	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d111      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0cc      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b68      	ldr	r3, [pc, #416]	@ (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d90c      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b65      	ldr	r3, [pc, #404]	@ (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	@ (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d044      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d119      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b3f      	ldr	r3, [pc, #252]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e06f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	4b3b      	ldr	r3, [pc, #236]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e067      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f46:	4b37      	ldr	r3, [pc, #220]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4934      	ldr	r1, [pc, #208]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f58:	f7fe fbf2 	bl	8001740 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f60:	f7fe fbee 	bl	8001740 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e04f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	4b2b      	ldr	r3, [pc, #172]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 020c 	and.w	r2, r3, #12
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1eb      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b25      	ldr	r3, [pc, #148]	@ (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d20c      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b22      	ldr	r3, [pc, #136]	@ (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	@ (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fda:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 f821 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	490a      	ldr	r1, [pc, #40]	@ (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	5ccb      	ldrb	r3, [r1, r3]
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	@ (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	@ (8003030 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fb52 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023c00 	.word	0x40023c00
 8003024:	40023800 	.word	0x40023800
 8003028:	080038a8 	.word	0x080038a8
 800302c:	20000000 	.word	0x20000000
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003038:	b094      	sub	sp, #80	@ 0x50
 800303a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304c:	4b79      	ldr	r3, [pc, #484]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d00d      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x40>
 8003058:	2b08      	cmp	r3, #8
 800305a:	f200 80e1 	bhi.w	8003220 <HAL_RCC_GetSysClockFreq+0x1ec>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x34>
 8003062:	2b04      	cmp	r3, #4
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x3a>
 8003066:	e0db      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b73      	ldr	r3, [pc, #460]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x204>)
 800306a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800306c:	e0db      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306e:	4b73      	ldr	r3, [pc, #460]	@ (800323c <HAL_RCC_GetSysClockFreq+0x208>)
 8003070:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003072:	e0d8      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003074:	4b6f      	ldr	r3, [pc, #444]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800307c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307e:	4b6d      	ldr	r3, [pc, #436]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d063      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b6a      	ldr	r3, [pc, #424]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	2200      	movs	r2, #0
 8003092:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003094:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309c:	633b      	str	r3, [r7, #48]	@ 0x30
 800309e:	2300      	movs	r3, #0
 80030a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030a6:	4622      	mov	r2, r4
 80030a8:	462b      	mov	r3, r5
 80030aa:	f04f 0000 	mov.w	r0, #0
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	0159      	lsls	r1, r3, #5
 80030b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b8:	0150      	lsls	r0, r2, #5
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4621      	mov	r1, r4
 80030c0:	1a51      	subs	r1, r2, r1
 80030c2:	6139      	str	r1, [r7, #16]
 80030c4:	4629      	mov	r1, r5
 80030c6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d8:	4659      	mov	r1, fp
 80030da:	018b      	lsls	r3, r1, #6
 80030dc:	4651      	mov	r1, sl
 80030de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e2:	4651      	mov	r1, sl
 80030e4:	018a      	lsls	r2, r1, #6
 80030e6:	4651      	mov	r1, sl
 80030e8:	ebb2 0801 	subs.w	r8, r2, r1
 80030ec:	4659      	mov	r1, fp
 80030ee:	eb63 0901 	sbc.w	r9, r3, r1
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003106:	4690      	mov	r8, r2
 8003108:	4699      	mov	r9, r3
 800310a:	4623      	mov	r3, r4
 800310c:	eb18 0303 	adds.w	r3, r8, r3
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	462b      	mov	r3, r5
 8003114:	eb49 0303 	adc.w	r3, r9, r3
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003126:	4629      	mov	r1, r5
 8003128:	024b      	lsls	r3, r1, #9
 800312a:	4621      	mov	r1, r4
 800312c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003130:	4621      	mov	r1, r4
 8003132:	024a      	lsls	r2, r1, #9
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800313a:	2200      	movs	r2, #0
 800313c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800313e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003140:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003144:	f7fd fc2e 	bl	80009a4 <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4613      	mov	r3, r2
 800314e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003150:	e058      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003152:	4b38      	ldr	r3, [pc, #224]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	2200      	movs	r2, #0
 800315a:	4618      	mov	r0, r3
 800315c:	4611      	mov	r1, r2
 800315e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003162:	623b      	str	r3, [r7, #32]
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
 8003168:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800316c:	4642      	mov	r2, r8
 800316e:	464b      	mov	r3, r9
 8003170:	f04f 0000 	mov.w	r0, #0
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	0159      	lsls	r1, r3, #5
 800317a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800317e:	0150      	lsls	r0, r2, #5
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4641      	mov	r1, r8
 8003186:	ebb2 0a01 	subs.w	sl, r2, r1
 800318a:	4649      	mov	r1, r9
 800318c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800319c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031a4:	ebb2 040a 	subs.w	r4, r2, sl
 80031a8:	eb63 050b 	sbc.w	r5, r3, fp
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	00eb      	lsls	r3, r5, #3
 80031b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ba:	00e2      	lsls	r2, r4, #3
 80031bc:	4614      	mov	r4, r2
 80031be:	461d      	mov	r5, r3
 80031c0:	4643      	mov	r3, r8
 80031c2:	18e3      	adds	r3, r4, r3
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	464b      	mov	r3, r9
 80031c8:	eb45 0303 	adc.w	r3, r5, r3
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031da:	4629      	mov	r1, r5
 80031dc:	028b      	lsls	r3, r1, #10
 80031de:	4621      	mov	r1, r4
 80031e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031e4:	4621      	mov	r1, r4
 80031e6:	028a      	lsls	r2, r1, #10
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ee:	2200      	movs	r2, #0
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	61fa      	str	r2, [r7, #28]
 80031f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f8:	f7fd fbd4 	bl	80009a4 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4613      	mov	r3, r2
 8003202:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003204:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	3301      	adds	r3, #1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003214:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800321e:	e002      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x204>)
 8003222:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003228:	4618      	mov	r0, r3
 800322a:	3750      	adds	r7, #80	@ 0x50
 800322c:	46bd      	mov	sp, r7
 800322e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	00f42400 	.word	0x00f42400
 800323c:	007a1200 	.word	0x007a1200

08003240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003244:	4b03      	ldr	r3, [pc, #12]	@ (8003254 <HAL_RCC_GetHCLKFreq+0x14>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000000 	.word	0x20000000

08003258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800325c:	f7ff fff0 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0a9b      	lsrs	r3, r3, #10
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4903      	ldr	r1, [pc, #12]	@ (800327c <HAL_RCC_GetPCLK1Freq+0x24>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40023800 	.word	0x40023800
 800327c:	080038b8 	.word	0x080038b8

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003284:	f7ff ffdc 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0b5b      	lsrs	r3, r3, #13
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4903      	ldr	r1, [pc, #12]	@ (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	080038b8 	.word	0x080038b8

080032a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e042      	b.n	8003340 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe f91c 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	@ 0x24
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f82b 	bl	8003348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b0c0      	sub	sp, #256	@ 0x100
 800334e:	af00      	add	r7, sp, #0
 8003350:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	68d9      	ldr	r1, [r3, #12]
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	ea40 0301 	orr.w	r3, r0, r1
 8003370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	431a      	orrs	r2, r3
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	431a      	orrs	r2, r3
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033a0:	f021 010c 	bic.w	r1, r1, #12
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033ae:	430b      	orrs	r3, r1
 80033b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c2:	6999      	ldr	r1, [r3, #24]
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	ea40 0301 	orr.w	r3, r0, r1
 80033ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003614 <UART_SetConfig+0x2cc>)
 80033d8:	429a      	cmp	r2, r3
 80033da:	d005      	beq.n	80033e8 <UART_SetConfig+0xa0>
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003618 <UART_SetConfig+0x2d0>)
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d104      	bne.n	80033f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033e8:	f7ff ff4a 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 80033ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033f0:	e003      	b.n	80033fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033f2:	f7ff ff31 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 80033f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003404:	f040 810c 	bne.w	8003620 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800340c:	2200      	movs	r2, #0
 800340e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003412:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800341a:	4622      	mov	r2, r4
 800341c:	462b      	mov	r3, r5
 800341e:	1891      	adds	r1, r2, r2
 8003420:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003422:	415b      	adcs	r3, r3
 8003424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800342a:	4621      	mov	r1, r4
 800342c:	eb12 0801 	adds.w	r8, r2, r1
 8003430:	4629      	mov	r1, r5
 8003432:	eb43 0901 	adc.w	r9, r3, r1
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800344a:	4690      	mov	r8, r2
 800344c:	4699      	mov	r9, r3
 800344e:	4623      	mov	r3, r4
 8003450:	eb18 0303 	adds.w	r3, r8, r3
 8003454:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003458:	462b      	mov	r3, r5
 800345a:	eb49 0303 	adc.w	r3, r9, r3
 800345e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800346e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003476:	460b      	mov	r3, r1
 8003478:	18db      	adds	r3, r3, r3
 800347a:	653b      	str	r3, [r7, #80]	@ 0x50
 800347c:	4613      	mov	r3, r2
 800347e:	eb42 0303 	adc.w	r3, r2, r3
 8003482:	657b      	str	r3, [r7, #84]	@ 0x54
 8003484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800348c:	f7fd fa8a 	bl	80009a4 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4b61      	ldr	r3, [pc, #388]	@ (800361c <UART_SetConfig+0x2d4>)
 8003496:	fba3 2302 	umull	r2, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	011c      	lsls	r4, r3, #4
 800349e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	1891      	adds	r1, r2, r2
 80034b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034b8:	415b      	adcs	r3, r3
 80034ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034c0:	4641      	mov	r1, r8
 80034c2:	eb12 0a01 	adds.w	sl, r2, r1
 80034c6:	4649      	mov	r1, r9
 80034c8:	eb43 0b01 	adc.w	fp, r3, r1
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034e0:	4692      	mov	sl, r2
 80034e2:	469b      	mov	fp, r3
 80034e4:	4643      	mov	r3, r8
 80034e6:	eb1a 0303 	adds.w	r3, sl, r3
 80034ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034ee:	464b      	mov	r3, r9
 80034f0:	eb4b 0303 	adc.w	r3, fp, r3
 80034f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003504:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800350c:	460b      	mov	r3, r1
 800350e:	18db      	adds	r3, r3, r3
 8003510:	643b      	str	r3, [r7, #64]	@ 0x40
 8003512:	4613      	mov	r3, r2
 8003514:	eb42 0303 	adc.w	r3, r2, r3
 8003518:	647b      	str	r3, [r7, #68]	@ 0x44
 800351a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800351e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003522:	f7fd fa3f 	bl	80009a4 <__aeabi_uldivmod>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4611      	mov	r1, r2
 800352c:	4b3b      	ldr	r3, [pc, #236]	@ (800361c <UART_SetConfig+0x2d4>)
 800352e:	fba3 2301 	umull	r2, r3, r3, r1
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2264      	movs	r2, #100	@ 0x64
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	1acb      	subs	r3, r1, r3
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003542:	4b36      	ldr	r3, [pc, #216]	@ (800361c <UART_SetConfig+0x2d4>)
 8003544:	fba3 2302 	umull	r2, r3, r3, r2
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003550:	441c      	add	r4, r3
 8003552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003556:	2200      	movs	r2, #0
 8003558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800355c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003564:	4642      	mov	r2, r8
 8003566:	464b      	mov	r3, r9
 8003568:	1891      	adds	r1, r2, r2
 800356a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800356c:	415b      	adcs	r3, r3
 800356e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003574:	4641      	mov	r1, r8
 8003576:	1851      	adds	r1, r2, r1
 8003578:	6339      	str	r1, [r7, #48]	@ 0x30
 800357a:	4649      	mov	r1, r9
 800357c:	414b      	adcs	r3, r1
 800357e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800358c:	4659      	mov	r1, fp
 800358e:	00cb      	lsls	r3, r1, #3
 8003590:	4651      	mov	r1, sl
 8003592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003596:	4651      	mov	r1, sl
 8003598:	00ca      	lsls	r2, r1, #3
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	4642      	mov	r2, r8
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035a8:	464b      	mov	r3, r9
 80035aa:	460a      	mov	r2, r1
 80035ac:	eb42 0303 	adc.w	r3, r2, r3
 80035b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035c8:	460b      	mov	r3, r1
 80035ca:	18db      	adds	r3, r3, r3
 80035cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ce:	4613      	mov	r3, r2
 80035d0:	eb42 0303 	adc.w	r3, r2, r3
 80035d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035de:	f7fd f9e1 	bl	80009a4 <__aeabi_uldivmod>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <UART_SetConfig+0x2d4>)
 80035e8:	fba3 1302 	umull	r1, r3, r3, r2
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	2164      	movs	r1, #100	@ 0x64
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	3332      	adds	r3, #50	@ 0x32
 80035fa:	4a08      	ldr	r2, [pc, #32]	@ (800361c <UART_SetConfig+0x2d4>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	f003 0207 	and.w	r2, r3, #7
 8003606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4422      	add	r2, r4
 800360e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003610:	e106      	b.n	8003820 <UART_SetConfig+0x4d8>
 8003612:	bf00      	nop
 8003614:	40011000 	.word	0x40011000
 8003618:	40011400 	.word	0x40011400
 800361c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003624:	2200      	movs	r2, #0
 8003626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800362a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800362e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003632:	4642      	mov	r2, r8
 8003634:	464b      	mov	r3, r9
 8003636:	1891      	adds	r1, r2, r2
 8003638:	6239      	str	r1, [r7, #32]
 800363a:	415b      	adcs	r3, r3
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
 800363e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003642:	4641      	mov	r1, r8
 8003644:	1854      	adds	r4, r2, r1
 8003646:	4649      	mov	r1, r9
 8003648:	eb43 0501 	adc.w	r5, r3, r1
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	00eb      	lsls	r3, r5, #3
 8003656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800365a:	00e2      	lsls	r2, r4, #3
 800365c:	4614      	mov	r4, r2
 800365e:	461d      	mov	r5, r3
 8003660:	4643      	mov	r3, r8
 8003662:	18e3      	adds	r3, r4, r3
 8003664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003668:	464b      	mov	r3, r9
 800366a:	eb45 0303 	adc.w	r3, r5, r3
 800366e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800367e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800368e:	4629      	mov	r1, r5
 8003690:	008b      	lsls	r3, r1, #2
 8003692:	4621      	mov	r1, r4
 8003694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003698:	4621      	mov	r1, r4
 800369a:	008a      	lsls	r2, r1, #2
 800369c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036a0:	f7fd f980 	bl	80009a4 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4b60      	ldr	r3, [pc, #384]	@ (800382c <UART_SetConfig+0x4e4>)
 80036aa:	fba3 2302 	umull	r2, r3, r3, r2
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	011c      	lsls	r4, r3, #4
 80036b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036c4:	4642      	mov	r2, r8
 80036c6:	464b      	mov	r3, r9
 80036c8:	1891      	adds	r1, r2, r2
 80036ca:	61b9      	str	r1, [r7, #24]
 80036cc:	415b      	adcs	r3, r3
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d4:	4641      	mov	r1, r8
 80036d6:	1851      	adds	r1, r2, r1
 80036d8:	6139      	str	r1, [r7, #16]
 80036da:	4649      	mov	r1, r9
 80036dc:	414b      	adcs	r3, r1
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036ec:	4659      	mov	r1, fp
 80036ee:	00cb      	lsls	r3, r1, #3
 80036f0:	4651      	mov	r1, sl
 80036f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036f6:	4651      	mov	r1, sl
 80036f8:	00ca      	lsls	r2, r1, #3
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	4642      	mov	r2, r8
 8003702:	189b      	adds	r3, r3, r2
 8003704:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003708:	464b      	mov	r3, r9
 800370a:	460a      	mov	r2, r1
 800370c:	eb42 0303 	adc.w	r3, r2, r3
 8003710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800371e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800372c:	4649      	mov	r1, r9
 800372e:	008b      	lsls	r3, r1, #2
 8003730:	4641      	mov	r1, r8
 8003732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003736:	4641      	mov	r1, r8
 8003738:	008a      	lsls	r2, r1, #2
 800373a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800373e:	f7fd f931 	bl	80009a4 <__aeabi_uldivmod>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4611      	mov	r1, r2
 8003748:	4b38      	ldr	r3, [pc, #224]	@ (800382c <UART_SetConfig+0x4e4>)
 800374a:	fba3 2301 	umull	r2, r3, r3, r1
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	2264      	movs	r2, #100	@ 0x64
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	1acb      	subs	r3, r1, r3
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	3332      	adds	r3, #50	@ 0x32
 800375c:	4a33      	ldr	r2, [pc, #204]	@ (800382c <UART_SetConfig+0x4e4>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003768:	441c      	add	r4, r3
 800376a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800376e:	2200      	movs	r2, #0
 8003770:	673b      	str	r3, [r7, #112]	@ 0x70
 8003772:	677a      	str	r2, [r7, #116]	@ 0x74
 8003774:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003778:	4642      	mov	r2, r8
 800377a:	464b      	mov	r3, r9
 800377c:	1891      	adds	r1, r2, r2
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	415b      	adcs	r3, r3
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003788:	4641      	mov	r1, r8
 800378a:	1851      	adds	r1, r2, r1
 800378c:	6039      	str	r1, [r7, #0]
 800378e:	4649      	mov	r1, r9
 8003790:	414b      	adcs	r3, r1
 8003792:	607b      	str	r3, [r7, #4]
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037a0:	4659      	mov	r1, fp
 80037a2:	00cb      	lsls	r3, r1, #3
 80037a4:	4651      	mov	r1, sl
 80037a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037aa:	4651      	mov	r1, sl
 80037ac:	00ca      	lsls	r2, r1, #3
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	4603      	mov	r3, r0
 80037b4:	4642      	mov	r2, r8
 80037b6:	189b      	adds	r3, r3, r2
 80037b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037ba:	464b      	mov	r3, r9
 80037bc:	460a      	mov	r2, r1
 80037be:	eb42 0303 	adc.w	r3, r2, r3
 80037c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80037ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037dc:	4649      	mov	r1, r9
 80037de:	008b      	lsls	r3, r1, #2
 80037e0:	4641      	mov	r1, r8
 80037e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e6:	4641      	mov	r1, r8
 80037e8:	008a      	lsls	r2, r1, #2
 80037ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037ee:	f7fd f8d9 	bl	80009a4 <__aeabi_uldivmod>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <UART_SetConfig+0x4e4>)
 80037f8:	fba3 1302 	umull	r1, r3, r3, r2
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	2164      	movs	r1, #100	@ 0x64
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	3332      	adds	r3, #50	@ 0x32
 800380a:	4a08      	ldr	r2, [pc, #32]	@ (800382c <UART_SetConfig+0x4e4>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	f003 020f 	and.w	r2, r3, #15
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4422      	add	r2, r4
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	bf00      	nop
 8003822:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003826:	46bd      	mov	sp, r7
 8003828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382c:	51eb851f 	.word	0x51eb851f

08003830 <memset>:
 8003830:	4402      	add	r2, r0
 8003832:	4603      	mov	r3, r0
 8003834:	4293      	cmp	r3, r2
 8003836:	d100      	bne.n	800383a <memset+0xa>
 8003838:	4770      	bx	lr
 800383a:	f803 1b01 	strb.w	r1, [r3], #1
 800383e:	e7f9      	b.n	8003834 <memset+0x4>

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	4d0d      	ldr	r5, [pc, #52]	@ (8003878 <__libc_init_array+0x38>)
 8003844:	4c0d      	ldr	r4, [pc, #52]	@ (800387c <__libc_init_array+0x3c>)
 8003846:	1b64      	subs	r4, r4, r5
 8003848:	10a4      	asrs	r4, r4, #2
 800384a:	2600      	movs	r6, #0
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	4d0b      	ldr	r5, [pc, #44]	@ (8003880 <__libc_init_array+0x40>)
 8003852:	4c0c      	ldr	r4, [pc, #48]	@ (8003884 <__libc_init_array+0x44>)
 8003854:	f000 f818 	bl	8003888 <_init>
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	2600      	movs	r6, #0
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	080038c8 	.word	0x080038c8
 800387c:	080038c8 	.word	0x080038c8
 8003880:	080038c8 	.word	0x080038c8
 8003884:	080038cc 	.word	0x080038cc

08003888 <_init>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	bf00      	nop
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr

08003894 <_fini>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	bf00      	nop
 8003898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389a:	bc08      	pop	{r3}
 800389c:	469e      	mov	lr, r3
 800389e:	4770      	bx	lr
